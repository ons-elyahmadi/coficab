{
    "collab_server" : "",
    "contents" : "################################\n#  Model Building              #\n#  AUTHOR: Adamma Morrison     #\n#  Nov 10, 2018                #\n################################\n\n# This script will generate several models for the data\n# 1.\tSimple linear regression\n# 2.  Time Series Forecasting - ARIMA\n# 3.\tTime Series Forecasting - Neural Network\n# 4.\tRandom Forest\n\n# First load libraries, uncomment and install if you don't have them already\nrequire(tidyverse)\nrequire(forecast)\nrequire(randomForest)\n\n# Load information\ndata <- read_csv(\"data/cleaned_data.csv\") # The read_csv command is faster, and it automatically parses most of the data\ndata[c(2,3,6,7,11,12)] <- lapply(data[c(2,3,6,7,11,12)], as.numeric) # these columns need to be changed to numeric\n\n# Use roughly 70/30 split for training and test data\ntrain <- data[1:77,]\ntest <- data[78:111,]\n\n################\n# 1. Simple linear regression, without percent change vars. http://r-statistics.co/Linear-Regression.html\n################\n\nsimple_LR_copper <- lm(copper_price ~ libor12 + libor3 + crude_oil + natural_gas + sp500 + nasdaq + industrial_mining,\n            data = train)\nsimple_LR_zinc <- lm(zinc_price ~ libor12 + libor3 + crude_oil + natural_gas + sp500 + nasdaq + industrial_mining,\n            data = train)\n\n## See info about linear models ##\nsummary(simple_LR_copper)\nsummary(simple_LR_zinc)\n\n\n\n##################\n# 2. Time series forecasting - ARIMA  (from https://www.statmethods.net/advstats/timeseries.html) - no training and test sets\n#################\n\n# Fit models for copper and zinc - use auto.arima on time series version of data\nfit_copper <- auto.arima(ts(data[1:104, 2],start=c(1991, 1), end=c(2016, 4), frequency=4),D=1)\nfit_zinc <- auto.arima(ts(data[1:104, 3],start=c(1991, 1), end=c(2016, 4), frequency=4),D=1)\n\n# Forecast copper and zinc for 16 periods - four years\nforecast_copper <- forecast(fit_copper, h=16)\nforecast_zinc <- forecast(fit_zinc, h=16)\n\n##See results of ARIMA forecast##\n# Plot predictions\nplot(forecast_copper, main =\"ARIMA Forecast for copper\")\nplot(forecast_zinc, main =\"ARIMA Forecast for zinc\")\n\n# Numeric predictions - the mean ARIMA predictions\nARIMA_copper_pred <- as.numeric(forecast_copper$mean)\nARIMA_zinc_pred <- as.numeric(forecast_zinc$mean)\n\n\n\n\n###################\n# 3. Time Series Forecasting - Neural Network\n##################\n# Put info in time series\ncopper_ts <- ts(data[1:104, 2], start=c(1991, 1), end=c(2016, 4), frequency=4) \nzinc_ts <- ts(data[1:104, 3], start=c(1991, 1), end=c(2016, 4), frequency=4)\n\n# Make neural network forecast\nnn_forecast_copper <- forecast(nnetar(copper_ts), h=16)\nnn_forecast_zinc <- forecast(nnetar(zinc_ts), h=16)\n\n## See results of NN forecast##\n# Plot predictions\nplot(nn_forecast_copper, main =\"NN Forecast for copper\")\nplot(nn_forecast_zinc, main =\"NN Forecast for zinc\")\n\n# Numeric predictions - NN forecast model\nNN_copper_pred <- data.frame(nn_forecast_copper)\nNN_zinc_pred <- data.frame(nn_forecast_zinc)\n\n\n\n#################\n# 4. Decision Trees - Random Forest - 600 trees\n#################\n\nset.seed(1234567) # so analysis can be replicated\n\n# Use roughly 70/30 split for training and test data\ntrain <- data[1:77,]\ntest <- data[78:111,]\n\n# We will use all but first three variables (date, copper, and zinc price) to make predictive models\nRF_copper <- randomForest(copper_price ~ libor12 + libor3 + crude_oil + natural_gas + sp500 + nasdaq + industrial_mining \n                          + pc_copper + pc_zinc + pc_gdp, \n                          data = data, ntree=600, subset=1:77, mtry=8, na.action = na.omit)\n\nRF_zinc <- randomForest(zinc_price ~ libor12 + libor3 + crude_oil + natural_gas + sp500 + nasdaq + industrial_mining\n                        + pc_copper + pc_zinc + pc_gdp, \n                          data = data, ntree=600, subset=1:77, mtry=8, na.action = na.omit)\n\nprint(RF_copper)\nimportance(RF_copper)\n\nprint(RF_zinc)\nimportance(RF_zinc)\n\n## Save models\n#save.image(file=\"bin/models.RData\")\n",
    "created" : 1542075283892.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4098624146",
    "id" : "A38DAD97",
    "lastKnownWriteTime" : 1542075413,
    "last_content_update" : 1542075413929,
    "path" : "~/Desktop/Predicting_Metal_Costs/src/03_model_building.R",
    "project_path" : "src/03_model_building.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}